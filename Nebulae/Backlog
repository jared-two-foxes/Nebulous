
# Sprint {Squid}
  [1]  Add ink particle effect to squid movement.
  [2]  Create Entity Templates which are used to generate Entity instances.
  [2]  Use distributions for Entity Template values to allow for variance.
  [1]  Generate Entity instances from templates.
  [4]  Create motion system based upon steering behaviours.
  [4]  Create a statemachine to describe different transitions for entities and the associated animations for each transition and state.  ie the player should go to an electrified state before becoming dead when being hit by eel.
  [4]  Define Achievements as a list of different requirements that need to be met.
  [4]  Implement a way to check if requirements have been met.
  [4]  Add UI for achievements, each achievement needs to be a statemachine that can transition from not-seen - seen - met-and-not-seen - met with transitions for each state.
  [1]  Add in plastic bag entity
  [1]  Add in jellyfish entity
  [1]  Remove Squidish from the Samples folder and move it into its own 'repo' which externs the Nebulae engine.


# Sprint {Engine}
  Split the test programs into seperate projects so they can be run independantly
  Split the RenderSystems and build them as dll's, creation of render system based upon some enum based to a free function.
  Add all RenderSystems to the build process so that things can be built and tested at once.
  Possibly change the RenderSystem structure so that shared elements can be shared (ie make them component based rather than system based?)
  Create a UI creation project that works on the json files that are currently used. Editor!

  [2] Reintroduce the Prefab factory into Beta Library.
  [][GLES] Implement the correct locking behaviour based upon usage for Buffers.
  [8] Create a SpriteAnimationViewer application which displays a specific animation sequence.
  [1] modify sprite animation classes to allow for offsets and rotations of sprites.
  [1] modify sprite animation classes to allow for multiple sprites per frame of animation.
  [1] modify sprite aniamtion classes to allow for lerping between transforms of different frames of the animation.
  [2] Remove all xml parsing code and remove the library from the engine.
  [2] migrate as many boost libraries to equivalent stl libraries.


# Backlog

## Build System
  [20] Change the build process so that it somehow causes the 'install' command to be called; ie rebuild the projects and copy everything to the correct paths before linking the project to our solution?  Better emulate normal flow for linking against libraries so that we can have better support for the project vs static link types.
  [1]  Determine what to do about the "builds" folder in freetype which contain platform specific files such as the win32 overridden ftdebug.c folder.
  
  (*) b2 variant=debug link=static threading=multi runtime-link=static stage
  
  (*) b2 address-model=64 architecture=x86 variant=debug link=static threading=multi runtime-link=static stage

  
## UnitTests
  
## Common
  []   Remove the concept of mouse "buttons" for the input listener?  We are a touch based system, only a single touch type?
  []   Restructure the InputListener and the Win32 platform input listener loop and make it part of the common library (so that the Window class is self contained.)
  
## Alpha
  [] Ensure that object deletion clears up correctly.  For example the inputLayout objects store pointers to the HardwareShader object which if deleted elsewhere the pointer will dangle.
  
## Audio
  [1]  Implement returning the play cursor from an OpenAudioLibraryEmitter.
  [1]  Implement moving the play cursor for an OpenAudioLibraryEmitter.
  [2]  Dynamically determine AudioDecoder type in AudioBackend::CreateSound.
  [4]  Emitter groups, ie music and sfx groups so that we have a means to change the volume of sets of sounds easily.
  [3]  AudioSoundInterface should hold the AudioTrackData and decoder should retrieve a pointer/reference to this when parsing and parse the information straight into said structure.
  [3]  Let the sound interface hold the ifstream to said sound file and pass this to the decoder probably with the track information when parsing.

## Beta
  []   Modify the state system to recieve the input messages?
  [1]  Dynamic depth for the widgets in "default_gui_vs.glsl"
  [2]  Handle the relative mouse move coordinates in the GameInputListener class.

## Audio Player

## Squidish
  [16] Achievement system.
  [4]  Options Menu State.
  [4]  Highscore Menu State.
  [8]  Implement Sfx Sounds.
  [8]  Implement Music Sounds.
  [4]  Implement Sound/Pause Menu.  (Plants V Zombies Reference)
  [16] Modify implementation of Behaviours to be a single behaviour for ALL actors of that type.  Think of Blackboard type system for the per actor data required. Figure out how to iterate lists with a single behaviour?  Instead of returning Behaviour of actors return the actor itself.  How to handle input on behaviour controlled actors?
  [1]   Add in the ModKeys flag to the state system.

# Complete

## 11-09-2015
  [1]   Allow entities to share components (ie placementcomponent)
  [1]   Allow entities to have more than one of a component type.
  [1]   Model needs to be able to return all of the components of a specific type that an entity is associated with.
  [1]   Model should be able to create an arbitary component.
  [1]   Entity needs to be able to associated with any component type including at run time.
## 26-08-2015
  [1][GL] Implement the correct locking behaviour based upon usage for Buffers.
  [1] Currectly identify the gl HardwareBuffer usages based upon the usage hints.
  [1] Add Vector, Quaternion etc to the Assert macro class
## 06-08-2015
  [1] removed the old style function pointer from AnimationController & Gui button.
## 13-06-2015
  [1]   {Nebulae}  Preserve Widget zorder when rendering.
  [4]  {Squidish} Combine the title and game mode so that the squid can drop straight out of the nets.
  [1]  {Squidish} Constrain the squid into the screen space
## 24-05-2015
  [] Modified the Window creation to resize the "window" if the size s changed during the creation process on Win32.
## 23-05-2015
  [] Added the ModKey Flag type to the input functions.
## 20-03-2015
  [20] {Beta} Anchoring system for gui panels.
## 02-02-2015
  [1]  {Squidish} AudioController should name the emitters with an identifier string.
## 31-12-2014
  [2]  {Squidish} Restart level feature
  [1]  {Squidish} Continue level feature
## 24-12-2014
  [8]  Rendering text during the gui phase interferes with the gui rendering due to changes made to the OpenGL renderer state.
  [1]  Remove the dependency on SceneGraph from SceneGenerator; pass position values instead.  
  [2]  Use the Mali Emulator setup for Win32 gles builds.
  [2]  Convert Sounds from media into recognisable formats.
## 07-05-2014
  [8] {Beta} Implement the widget render routines in WidgetRenderer.
  [1] {Beta} Change widget render function to take the upperLeft and lowerRight coordinates instead of the x,y,w,z that it currently accepts.
  [1] {Audio} Implement a basic gui.  Volume Slider.
  [1] {Audio} Implement a basic gui.  Start & Stop buttons.
## 06-05-2014
## 05-05-2014
  [2]  Gui System is not accepting input.  Ie buttons are not pressable.
  [2]  Investigate weird (driver?) interaction where the sound emitter does not start playing properly again after being stopped.
## 02-05-2014
  [2]  Reestablish the test project in the build system
  [1]  Rename the libdb.lua to something more sensible.
  [20] Define the include folders for the dependencies in the Dependencies table and the add these to the correct project/solution using a utils.addIncludeDirectories or something like that.
## 07-03-2014
  [20] Remove all the Singletons from Alpha & Beta engines.
## 28-10-2013
## 27-10-2013
  [3]  Handling the button presses for the defined buttons.  invokeAction style method in state where the action can be defined by the description file and then the actions handled in an overriden processAction function?
  [1]  Refresh the current state by reloading the gui file and scene file?
  [1]  Add the fish net to title screen.
  [8]  Build the gui for a given state from the json descriptor files which can be defined maybe from the states json descriptor file?
